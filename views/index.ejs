<!DOCTYPE html>
<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üíÄ TumnataMreja - Underground Market</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üíÄ</text></svg>">
   <link rel="stylesheet" href="/styles/style.css">
</head>
<body>
    <div class="matrix-bg" id="matrixBg"></div>

    <header>
        <nav class="container">
            <div class="logo glitch" data-text="">üíÄ TumnataMreja # Market</div>
            <div class="nav-links">
                <a href="/">–ù–ê–ß–ê–õ–û</a>
                <% if (user) { %>
                    <a href="/dashboard">–°–ò–°–¢–ï–ú–ê</a>
                    <a href="/logout">–ò–ó–•–û–î</a>
                    <span style="color: #00ff00; border: 1px solid #00ff00; padding: 0.3rem 0.8rem;">
                        USER: <%= user.username.toUpperCase() %>
                    </span>
                <% } else { %>
                    <a href="/login">–í–•–û–î</a>
                    <a href="/register" class="btn">–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø</a>
                <% } %>
            </div>
        </nav>
    </header>

    <main>
        <section class="hero">
            <div class="container">
                <h1 class="glitch cursor" data-text="">TUMNATAMREJA MARKET</h1>
                <div class="hero-features">
                    <div class="feature-badge">üîí –ê–ù–û–ù–ò–ú–ù–û–°–¢</div>
                    <div class="feature-badge">‚ö° –ù–ï–ó–ê–ë–ê–í–ù–û</div>
                    <div class="feature-badge">üíÄ UNTRACEABLE</div>
                    <div class="feature-badge">üåê 24/7 ONLINE</div>
                </div>
            </div>
        </section>

        <section class="products-section">
            <div class="container">
                <h2 class="section-title glitch" data-text="AVAILABLE PRODUCTS">AVAILABLE PRODUCTS</h2>
                
                <% if (!user) { %>
                    <div class="auth-prompt">
                        <h2>‚ö†Ô∏è –†–ï–ì–ò–°–¢–†–ò–†–ê–ô –°–ï (NO KYC)</h2>
                        <p>–ù–ï–û–ë–•–û–î–ò–ú–ê –ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê –î–û–°–¢–™–ü –î–û UNDERGROUND MARKET</p>
                        <div class="auth-buttons">
                            <a href="/login" class="btn-auth">LOGIN</a>
                            <a href="/register" class="btn-auth">REGISTER</a>
                        </div>
                    </div>
                <% } %>

                <div class="products-grid">
                    <% products.forEach(product => { %>
                        <div class="product-card">
                            <center><div class="product-image">
                            </div></center>
                            
                            <h3 class="product-name"><%= product.name %></h3>
                            <p class="product-description"><%= product.description %></p>
                            
                            <div class="product-price">–ª–≤.<%= product.price.toFixed(2) %></div>
                            
                            <div class="product-actions">
                                <% if (user) { %>
                                    <button class="btn-buy" onclick="openPurchaseModal(<%= product.id %>, '<%= product.name.replace(/'/g, "\\'") %>', <%= product.price %>)">
                                        üõí BUY NOW
                                    </button>
                                <% } else { %>
                                    <button class="btn-buy" onclick="alert('ACCESS DENIED - LOGIN REQUIRED!')">
                                        üîí ACCESS DENIED
                                    </button>
                                <% } %>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>
        </section>
    </main>

    <!-- Purchase Modal -->
    <div id="purchaseModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">üí≥ COMPLETE PURCHASE</h3>
                <button class="close-modal" onclick="closePurchaseModal()">&times;</button>
            </div>
            
            <div class="payment-form">
                <div class="form-group">
                    <label>üì¶ PRODUCT:</label>
                    <input type="text" id="modalProductName" readonly>
                </div>
                
                <div class="form-group">
                    <label>üìä QUANTITY:</label>
                    <input type="number" id="modalQuantity" min="1" max="10" value="1">
                </div>
                
                <div class="form-group">
                    <label>ü™ô CRYPTOCURRENCY:</label>
                    <select id="modalCurrency">
                        <option value="BTC">BITCOIN (BTC)</option>
                        <option value="ETH">ETHEREUM (ETH)</option>
                        <option value="USDT">TETHER (USDT)</option>
                        <option value="USDC">USD COIN (USDC)</option>
                        <option value="LTC">LITECOIN (LTC)</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>üè¶ PAYMENT PROVIDER:</label>
                    <div class="provider-selection">
                        <button type="button" class="provider-btn selected" data-provider="oxapay">
                            OXAPAY
                        </button>
                        <button type="button" class="provider-btn" data-provider="wolvpay">
                            WOLVPAY
                        </button>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>üí∞ TOTAL AMOUNT:</label>
                    <input type="text" id="modalTotal" readonly>
                </div>
                
                <button type="button" class="btn" onclick="processPurchase()" id="purchaseBtn">
                    üöÄ INITIALIZE PAYMENT
                </button>
                
                <div id="paymentResult" class="payment-result" style="display: none;"></div>
            </div>
        </div>
    </div>

    <footer>
        <div class="container">
            <p>&copy; 2025 TUMNATAMREJA | ANONYMOUS ‚Ä¢ SECURE ‚Ä¢ UNTRACEABLE</p>
        </div>
    </footer>

    <script>
        // Matrix rain effect
        function createMatrix() {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const matrixBg = document.getElementById('matrixBg');
            
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            matrixBg.appendChild(canvas);
            
            const chars = '01';
            const charArray = chars.split('');
            const fontSize = 10;
            const columns = canvas.width / fontSize;
            const drops = [];
            
            for (let x = 0; x < columns; x++) {
                drops[x] = 1;
            }
            
            function draw() {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                ctx.fillStyle = '#00ff00';
                ctx.font = fontSize + 'px monospace';
                
                for (let i = 0; i < drops.length; i++) {
                    const text = charArray[Math.floor(Math.random() * charArray.length)];
                    ctx.fillText(text, i * fontSize, drops[i] * fontSize);
                    
                    if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                        drops[i] = 0;
                    }
                    drops[i]++;
                }
            }
            
            setInterval(draw, 50);
        }
        
        // Initialize matrix on load
        window.addEventListener('load', createMatrix);
        
        let currentProductId = null;
        let currentProductPrice = 0;
        let selectedProvider = 'oxapay';

function openPurchaseModal(productId, productName, price) {
  currentProductId = productId;
  currentProductPrice = price;
  document.getElementById('modalProductName').value = productName;
  document.getElementById('modalQuantity').value = 1;
  document.getElementById('modalTotal').value = price.toFixed(2); // ‚úÖ –ø—Ä–∞–≤–∏–ª–Ω–æ
  document.getElementById('purchaseModal').style.display = 'block';
  document.body.style.overflow = 'hidden';
}
<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üíÄ TumnataMreja - Underground Market</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' + price.toFixed(2);
            
            document.getElementById('purchaseModal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closePurchaseModal() {
            document.getElementById('purchaseModal').style.display = 'none';
            document.body.style.overflow = 'auto';
            document.getElementById('paymentResult').style.display = 'none';
        }

        // Update total when quantity changes
document.addEventListener('DOMContentLoaded', function() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø—Ä–æ–º—è–Ω–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ
    const quantityInput = document.getElementById('modalQuantity');
    if (quantityInput) {
        quantityInput.addEventListener('input', function() {
            const quantity = parseInt(this.value) || 1;
            const total = currentProductPrice * quantity;
            document.getElementById('modalTotal').value = total.toFixed(2);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–∑–±–æ—Ä –Ω–∞ –¥–æ—Å—Ç–∞–≤—á–∏–∫
    const providerBtns = document.querySelectorAll('.provider-btn');
    providerBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            providerBtns.forEach(b => b.classList.remove('selected'));
            this.classList.add('selected');
            selectedProvider = this.dataset.provider;
        });
    });
});

<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üíÄ TumnataMreja - Underground Market</title>

            // Provider selection
const providerBtns = document.querySelectorAll('.provider-btn');
providerBtns.forEach(btn => {
    btn.addEventListener('click', function() {
        providerBtns.forEach(b => b.classList.remove('selected'));
        this.classList.add('selected');
        selectedProvider = this.dataset.provider;
    });
});


async function processPurchase() {
  if (!currentProductId) return;

  const quantity = parseInt(document.getElementById('modalQuantity').value) || 1;
  const currency = document.getElementById('modalCurrency').value;
  const provider = selectedProvider;

  if (!provider) {
    alert('–ú–æ–ª—è, –∏–∑–±–µ—Ä–∏ –¥–æ—Å—Ç–∞–≤—á–∏–∫ –∑–∞ –ø–ª–∞—â–∞–Ω–µ.');
    return;
  }

  const purchaseBtn = document.getElementById('purchaseBtn');
  const resultDiv = document.getElementById('paymentResult');

  purchaseBtn.disabled = true;
  purchaseBtn.innerHTML = '<span class="loading"></span> INITIALIZING...';

  try {
    const response = await fetch(`/buy/${currentProductId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ quantity, provider, currency })
    });

    const result = await response.json();

    if (result.success) {
      resultDiv.className = 'payment-result payment-success';
      resultDiv.innerHTML = `
        <h4>‚úÖ –ü–û–†–™–ß–ö–ê–¢–ê –ï –°–™–ó–î–ê–î–ï–ù–ê</h4>
        <p><strong>ID:</strong> ${result.paymentId}</p>
        <p><strong>–°—É–º–∞:</strong> ${result.cryptoAmount} ${result.cryptoCurrency}</p>
        <p><strong>–ê–¥—Ä–µ—Å:</strong></p>
        <div style="font-family: monospace; word-break: break-all;">${result.address}</div>
        <a href="${result.paymentUrl}" target="_blank" class="btn">üåê –ü–ª–∞—Ç–∏ —Å ${provider.toUpperCase()}</a>
      `;
      resultDiv.style.display = 'block';
      setTimeout(() => {
        closePurchaseModal();
        window.location.href = '/dashboard';
      }, 5000);
    } else {
      throw new Error(result.error || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞');
    }
  } catch (error) {
    resultDiv.className = 'payment-result payment-error';
    resultDiv.innerHTML = `<h4>‚ùå –ì—Ä–µ—à–∫–∞</h4><p>${error.message}</p>`;
    resultDiv.style.display = 'block';
  } finally {
    purchaseBtn.disabled = false;
    purchaseBtn.innerHTML = 'üöÄ INITIALIZE PAYMENT';
  }
}

        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                alert('üìã ADDRESS COPIED TO CLIPBOARD!');
            }).catch(() => {
                prompt('COPY THIS ADDRESS:', text);
            });
        }

        // Close modal when clicking outside
        document.getElementById('purchaseModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closePurchaseModal();
            }
        });

        // Escape key to close modal
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closePurchaseModal();
            }
        });

        // Terminal-style typing effect for titles
        function typeWriter(element, text, speed = 100) {
            let i = 0;
            element.innerHTML = '';
            function type() {
                if (i < text.length) {
                    element.innerHTML += text.charAt(i);
                    i++;
                    setTimeout(type, speed);
                }
            }
            type();
        }

        // Random glitch effect
        setInterval(() => {
            const glitchElements = document.querySelectorAll('.glitch');
            glitchElements.forEach(el => {
                if (Math.random() > 0.9) {
                    el.style.animation = 'none';
                    setTimeout(() => {
                        el.style.animation = 'glitch 0.3s linear';
                    }, 10);
                }
            });
        }, 2000);
    </script>
</body>
</html>
